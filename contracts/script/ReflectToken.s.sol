// SPDX-License-Identifier: MIT

pragma solidity 0.8.20;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                IMPORTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import {Script} from "forge-std/Script.sol";
import {ReflectToken} from "./../src/D_Reflect_Token/ReflectToken.sol";
import {DemoToken} from "./../src/A_ERC20/DemoToken.sol";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                               CONTRACTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

contract ReflectScript is Script {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                            STORAGE VARIABLE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    DemoToken public s_token;
    uint256 public constant TOKEN_AMOUNT = 1e18;
    uint256 public constant TOKEN_SUPPLY = 1e18;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    function setUp() public {}

    function run() public {
        vm.startBroadcast();

        address[] memory minters = new address[](1);
        minters[0] = msg.sender;
        s_token = new DemoToken("DemoToken", "DMT", minters);
        s_token.mintTo(msg.sender, TOKEN_AMOUNT);

        new ReflectToken("Reflect", "RFT", TOKEN_SUPPLY, TOKEN_SUPPLY, 100, 1e9, s_token);

        vm.stopBroadcast();
    }
}