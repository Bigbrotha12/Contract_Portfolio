// SPDX-License-Identifier: MIT

pragma solidity 0.8.20;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                IMPORTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import {IMintable} from "./IMintable.sol";
import {Minting} from "./Minting.sol";
import {CommonStorage} from "../CommonStorage.sol";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                               CONTRACTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

abstract contract Mintable is CommonStorage, IMintable {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                            STORAGE VARIABLE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    uint256 public constant MINT_LIMIT = 1;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                 EVENTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    event AssetMinted(address to, uint256 id, bytes blueprint);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                 ERRORS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    error Mintable__LimitExceeded(uint256 quantity, uint256 limit);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    function mintFor(address _user, uint256 _quantity, bytes calldata _mintingBlob) external override {
        if(_quantity > MINT_LIMIT) revert Mintable__LimitExceeded(_quantity, MINT_LIMIT);

        (uint256 id, bytes memory blueprint) = Minting.split(_mintingBlob);
        _mintFor(_user, id, blueprint);
        emit AssetMinted(_user, id, blueprint);
    }

    function _mintFor(address _to, uint256 _id, bytes memory _blueprint) internal virtual;
}