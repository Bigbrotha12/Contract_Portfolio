// SPDX-License-Identifier: MIT

pragma solidity 0.8.20;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                IMPORTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import {Bytes} from "../Library/Bytes.sol";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                               CONTRACTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

library Minting {
    // Split the minting blob into token_id and blueprint portions
    // {token_id}:{blueprint}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                 ERRORS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    error Minting__MissingSeparator();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    function split(bytes calldata _blob) internal pure returns (uint256, bytes memory) {
        int256 index = Bytes.indexOf(_blob, ":", 0);
        if(index == -1) revert Minting__MissingSeparator();

        // Trim the { and } from the parameters
        uint256 tokenID = Bytes.toUint(_blob[1:uint256(index) - 1]);
        uint256 blueprintLength = _blob.length - uint256(index) - 3;
        if (blueprintLength == 0) {
            return (tokenID, bytes(""));
        }
        bytes calldata blueprint = _blob[uint256(index) + 2:_blob.length - 1];
        return (tokenID, blueprint);
    }
}